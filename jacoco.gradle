def androidExclusion = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*'
]

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        html.enabled(true)
        csv.enabled(true)
    }

    def javaBuildTree = fileTree(
            dir: "build/intermediates/javac/debug/",
            excludes: androidExclusion
    )
    def kotlinBuildTree = fileTree(
            dir: "build/tmp/kotlin-classes/debug/",
            excludes: androidExclusion
    )
    def javaMainSrc = "${project.projectDir}/src/main/java/"
    def kotlinMainSrc = "${project.projectDir}/src/main/kotlin/"
    sourceDirectories.from = files([javaMainSrc, kotlinMainSrc])
    classDirectories.from = files([javaBuildTree, kotlinBuildTree])
    executionData.from = files("${project.buildDir}/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")
}

task showCoverageReport(type: Exec, dependsOn: 'jacocoTestReport') {
    group = "Reporting"
    commandLine "open", "${project.buildDir}/reports/jacoco/jacocoTestReport/html/index.html"
}

android.testOptions {
    unitTests.all {
        jacoco {
            includeNoLocationClasses = true
            excludes = ['jdk.internal.*']
        }
    }
}